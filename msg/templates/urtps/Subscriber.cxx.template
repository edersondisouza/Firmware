@###############################################
@#
@# EmPy template for generating <msg>_uRTPS_UART.cpp file
@#
@###############################################
@# Start of Template
@#
@# Context:
@#  - msgs (List) list of all msg files
@#  - multi_topics (List) list of all multi-topic names
@###############################################
@{
import genmsg.msgs
import gencpp
from px_generate_uorb_topic_helper import * # this is in Tools/

topic = spec.short_name
}@
// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file @(topic)_Subscriber.cpp
 * This file contains the implementation of the subscriber functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include <fastrtps/participant/Participant.h>
#include <fastrtps/attributes/ParticipantAttributes.h>
#include <fastrtps/subscriber/Subscriber.h>
#include <fastrtps/attributes/SubscriberAttributes.h>

#include <fastrtps/Domain.h>

#include "@(topic)_Subscriber.h"


@(topic)_Subscriber::@(topic)_Subscriber() : mp_participant(nullptr), mp_subscriber(nullptr) {}

@(topic)_Subscriber::~@(topic)_Subscriber() {   Domain::removeParticipant(mp_participant);}

bool @(topic)_Subscriber::init()
{
    // Create RTPSParticipant
    
    ParticipantAttributes PParam;
    PParam.rtps.builtin.domainId = 0; //MUST BE THE SAME AS IN THE PUBLISHER
    PParam.rtps.builtin.leaseDuration = c_TimeInfinite;
    PParam.rtps.setName("Participant_subscriber"); //You can put the name you want
    mp_participant = Domain::createParticipant(PParam);
    if(mp_participant == nullptr)
            return false;
    
    //Register the type
    
    Domain::registerType(mp_participant,(TopicDataType*) &myType);      
            
    // Create Subscriber
            
    SubscriberAttributes Rparam;
    Rparam.topic.topicKind = NO_KEY;
    Rparam.topic.topicDataType = myType.getName(); //Must be registered before the creation of the subscriber
    Rparam.topic.topicName = "@(topic)_PubSubTopic";
    mp_subscriber = Domain::createSubscriber(mp_participant,Rparam,(SubscriberListener*)&m_listener);
    if(mp_subscriber == nullptr)
        return false;
    return true;
}

void @(topic)_Subscriber::SubListener::onSubscriptionMatched(Subscriber* sub,MatchingInfo& info)
{
    if (info.status == MATCHED_MATCHING)
    {
        n_matched++;
        cout << "Subscriber matched" << endl;
    }
    else
    {
        n_matched--;
        cout << "Subscriber unmatched" << endl;
    }
}

void @(topic)_Subscriber::SubListener::onNewDataMessage(Subscriber* sub)
{
        // Take data
        if(sub->takeNextData(&msg, &m_info))
        {
            if(m_info.sampleKind == ALIVE)
            {
                // Print your structure data here.
                ++n_msg;
                cout << "Sample received, count=" << n_msg << endl;
                has_msg = true;

            }
        }
}

void @(topic)_Subscriber::run()
{
    cout << "Waiting for Data, press Enter to stop the Subscriber. "<<endl;
    std::cin.ignore();
    cout << "Shutting down the Subscriber." << endl;
}

bool @(topic)_Subscriber::hasMsg()
{
    return m_listener.has_msg;
}

@(topic)_ @(topic)_Subscriber::getMsg()
{
    m_listener.has_msg = false;
    return m_listener.msg;
}