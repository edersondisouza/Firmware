@###############################################
@#
@# EmPy template for generating <msg>_uRTPS_UART.cpp file
@#
@###############################################
@# Start of Template
@#
@# Context:
@#  - msgs (List) list of all msg files
@#  - multi_topics (List) list of all multi-topic names
@###############################################
@{
import genmsg.msgs
import gencpp
from px_generate_uorb_topic_helper import * # this is in Tools/

topic = spec.short_name
}@
// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @@file @(topic)_Subscriber.h
 * This header file contains the declaration of the subscriber functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#ifndef _@(topic)__SUBSCRIBER_H_
#define _@(topic)__SUBSCRIBER_H_

#include <fastrtps/fastrtps_fwd.h>
#include <fastrtps/subscriber/SubscriberListener.h>
#include <fastrtps/subscriber/SampleInfo.h>
#include "@(topic)_PubSubTypes.h"

using namespace eprosima::fastrtps;

class @(topic)_Subscriber 
{
public:
    @(topic)_Subscriber();
    virtual ~@(topic)_Subscriber();
    bool init();
    void run();
    bool hasMsg();
    @(topic)_ getMsg();
private:
    Participant *mp_participant;
    Subscriber *mp_subscriber;
    
    class SubListener : public SubscriberListener
    {
    public:
        SubListener() : n_matched(0),n_msg(0){};
        ~SubListener(){};
        void onSubscriptionMatched(Subscriber* sub,MatchingInfo& info);
        void onNewDataMessage(Subscriber* sub);
        SampleInfo_t m_info;
        int n_matched;
        int n_msg;
        @(topic)_ msg;
        bool has_msg = false;

    } m_listener;
    @(topic)_PubSubType myType;
};

#endif // _@(topic)__SUBSCRIBER_H_