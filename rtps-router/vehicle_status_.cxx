// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file vehicle_status_.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "vehicle_status_.h"

#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

vehicle_status_::vehicle_status_()
{
    m_timestamp = 0;
    m_system_id = 0;
    m_component_id = 0;
    m_onboard_control_sensors_present = 0;
    m_onboard_control_sensors_enabled = 0;
    m_onboard_control_sensors_health = 0;
    m_nav_state = 0;
    m_arming_state = 0;
    m_hil_state = 0;
    m_failsafe = false;
    m_system_type = 0;
    m_is_rotary_wing = false;
    m_is_vtol = false;
    m_vtol_fw_permanent_stab = false;
    m_in_transition_mode = false;
    m_in_transition_to_fw = false;
    m_rc_signal_lost = false;
    m_rc_input_mode = 0;
    m_data_link_lost = false;
    m_data_link_lost_counter = 0;
    m_engine_failure = false;
    m_engine_failure_cmd = false;
    m_mission_failure = false;
}

vehicle_status_::~vehicle_status_()
{
}

vehicle_status_::vehicle_status_(const vehicle_status_ &x)
{
    m_timestamp = x.m_timestamp;
    m_system_id = x.m_system_id;
    m_component_id = x.m_component_id;
    m_onboard_control_sensors_present = x.m_onboard_control_sensors_present;
    m_onboard_control_sensors_enabled = x.m_onboard_control_sensors_enabled;
    m_onboard_control_sensors_health = x.m_onboard_control_sensors_health;
    m_nav_state = x.m_nav_state;
    m_arming_state = x.m_arming_state;
    m_hil_state = x.m_hil_state;
    m_failsafe = x.m_failsafe;
    m_system_type = x.m_system_type;
    m_is_rotary_wing = x.m_is_rotary_wing;
    m_is_vtol = x.m_is_vtol;
    m_vtol_fw_permanent_stab = x.m_vtol_fw_permanent_stab;
    m_in_transition_mode = x.m_in_transition_mode;
    m_in_transition_to_fw = x.m_in_transition_to_fw;
    m_rc_signal_lost = x.m_rc_signal_lost;
    m_rc_input_mode = x.m_rc_input_mode;
    m_data_link_lost = x.m_data_link_lost;
    m_data_link_lost_counter = x.m_data_link_lost_counter;
    m_engine_failure = x.m_engine_failure;
    m_engine_failure_cmd = x.m_engine_failure_cmd;
    m_mission_failure = x.m_mission_failure;
}

vehicle_status_::vehicle_status_(vehicle_status_ &&x)
{
    m_timestamp = x.m_timestamp;
    m_system_id = x.m_system_id;
    m_component_id = x.m_component_id;
    m_onboard_control_sensors_present = x.m_onboard_control_sensors_present;
    m_onboard_control_sensors_enabled = x.m_onboard_control_sensors_enabled;
    m_onboard_control_sensors_health = x.m_onboard_control_sensors_health;
    m_nav_state = x.m_nav_state;
    m_arming_state = x.m_arming_state;
    m_hil_state = x.m_hil_state;
    m_failsafe = x.m_failsafe;
    m_system_type = x.m_system_type;
    m_is_rotary_wing = x.m_is_rotary_wing;
    m_is_vtol = x.m_is_vtol;
    m_vtol_fw_permanent_stab = x.m_vtol_fw_permanent_stab;
    m_in_transition_mode = x.m_in_transition_mode;
    m_in_transition_to_fw = x.m_in_transition_to_fw;
    m_rc_signal_lost = x.m_rc_signal_lost;
    m_rc_input_mode = x.m_rc_input_mode;
    m_data_link_lost = x.m_data_link_lost;
    m_data_link_lost_counter = x.m_data_link_lost_counter;
    m_engine_failure = x.m_engine_failure;
    m_engine_failure_cmd = x.m_engine_failure_cmd;
    m_mission_failure = x.m_mission_failure;
}

vehicle_status_& vehicle_status_::operator=(const vehicle_status_ &x)
{
    m_timestamp = x.m_timestamp;
    m_system_id = x.m_system_id;
    m_component_id = x.m_component_id;
    m_onboard_control_sensors_present = x.m_onboard_control_sensors_present;
    m_onboard_control_sensors_enabled = x.m_onboard_control_sensors_enabled;
    m_onboard_control_sensors_health = x.m_onboard_control_sensors_health;
    m_nav_state = x.m_nav_state;
    m_arming_state = x.m_arming_state;
    m_hil_state = x.m_hil_state;
    m_failsafe = x.m_failsafe;
    m_system_type = x.m_system_type;
    m_is_rotary_wing = x.m_is_rotary_wing;
    m_is_vtol = x.m_is_vtol;
    m_vtol_fw_permanent_stab = x.m_vtol_fw_permanent_stab;
    m_in_transition_mode = x.m_in_transition_mode;
    m_in_transition_to_fw = x.m_in_transition_to_fw;
    m_rc_signal_lost = x.m_rc_signal_lost;
    m_rc_input_mode = x.m_rc_input_mode;
    m_data_link_lost = x.m_data_link_lost;
    m_data_link_lost_counter = x.m_data_link_lost_counter;
    m_engine_failure = x.m_engine_failure;
    m_engine_failure_cmd = x.m_engine_failure_cmd;
    m_mission_failure = x.m_mission_failure;
    
    return *this;
}

vehicle_status_& vehicle_status_::operator=(vehicle_status_ &&x)
{
    m_timestamp = x.m_timestamp;
    m_system_id = x.m_system_id;
    m_component_id = x.m_component_id;
    m_onboard_control_sensors_present = x.m_onboard_control_sensors_present;
    m_onboard_control_sensors_enabled = x.m_onboard_control_sensors_enabled;
    m_onboard_control_sensors_health = x.m_onboard_control_sensors_health;
    m_nav_state = x.m_nav_state;
    m_arming_state = x.m_arming_state;
    m_hil_state = x.m_hil_state;
    m_failsafe = x.m_failsafe;
    m_system_type = x.m_system_type;
    m_is_rotary_wing = x.m_is_rotary_wing;
    m_is_vtol = x.m_is_vtol;
    m_vtol_fw_permanent_stab = x.m_vtol_fw_permanent_stab;
    m_in_transition_mode = x.m_in_transition_mode;
    m_in_transition_to_fw = x.m_in_transition_to_fw;
    m_rc_signal_lost = x.m_rc_signal_lost;
    m_rc_input_mode = x.m_rc_input_mode;
    m_data_link_lost = x.m_data_link_lost;
    m_data_link_lost_counter = x.m_data_link_lost_counter;
    m_engine_failure = x.m_engine_failure;
    m_engine_failure_cmd = x.m_engine_failure_cmd;
    m_mission_failure = x.m_mission_failure;
    
    return *this;
}

size_t vehicle_status_::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t vehicle_status_::getCdrSerializedSize(const vehicle_status_& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void vehicle_status_::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_timestamp;

    scdr << m_system_id;

    scdr << m_component_id;

    scdr << m_onboard_control_sensors_present;

    scdr << m_onboard_control_sensors_enabled;

    scdr << m_onboard_control_sensors_health;

    scdr << m_nav_state;

    scdr << m_arming_state;

    scdr << m_hil_state;

    scdr << m_failsafe;

    scdr << m_system_type;

    scdr << m_is_rotary_wing;

    scdr << m_is_vtol;

    scdr << m_vtol_fw_permanent_stab;

    scdr << m_in_transition_mode;

    scdr << m_in_transition_to_fw;

    scdr << m_rc_signal_lost;

    scdr << m_rc_input_mode;

    scdr << m_data_link_lost;

    scdr << m_data_link_lost_counter;

    scdr << m_engine_failure;

    scdr << m_engine_failure_cmd;

    scdr << m_mission_failure;

}

void vehicle_status_::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_timestamp;
    dcdr >> m_system_id;
    dcdr >> m_component_id;
    dcdr >> m_onboard_control_sensors_present;
    dcdr >> m_onboard_control_sensors_enabled;
    dcdr >> m_onboard_control_sensors_health;
    dcdr >> m_nav_state;
    dcdr >> m_arming_state;
    dcdr >> m_hil_state;
    dcdr >> m_failsafe;
    dcdr >> m_system_type;
    dcdr >> m_is_rotary_wing;
    dcdr >> m_is_vtol;
    dcdr >> m_vtol_fw_permanent_stab;
    dcdr >> m_in_transition_mode;
    dcdr >> m_in_transition_to_fw;
    dcdr >> m_rc_signal_lost;
    dcdr >> m_rc_input_mode;
    dcdr >> m_data_link_lost;
    dcdr >> m_data_link_lost_counter;
    dcdr >> m_engine_failure;
    dcdr >> m_engine_failure_cmd;
    dcdr >> m_mission_failure;
}

size_t vehicle_status_::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            
























    return current_align;
}

bool vehicle_status_::isKeyDefined()
{
    return false;
}

void vehicle_status_::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
}