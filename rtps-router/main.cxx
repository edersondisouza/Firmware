// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * <type 'file'> sensor_combined_PubSubMain.cpp
 * This file acts as a main entry point to the application.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include "vehicle_command_Subscriber.h"

#include "vehicle_status_Publisher.h"
#include "sensor_combined_Publisher.h"
#include "vehicle_command_ack_Publisher.h"

#include "UART_node.h"
#include "topic-id.h"

#include <fastcdr/Cdr.h>
#include <fastcdr/FastCdr.h>
#include <fastcdr/exceptions/Exception.h>
#include <fastrtps/utils/eClock.h>
#include <fastrtps/Domain.h>

#include <unistd.h>

#include <arpa/inet.h>
#include <fcntl.h>
#include <sys/epoll.h>
#include <sys/socket.h>
#include <sys/types.h>

using namespace std;
using namespace eprosima;
using namespace eprosima::fastrtps;

static struct sockaddr_in _sockaddr;

static int setup_udp()
{
    int fd;
    const int broadcast_val = 1;

    fd = socket(AF_INET, SOCK_DGRAM, 0);
    if (fd == -1) {
        cerr << "Could not create socket " << errno << endl;
        return -1;
    }

    _sockaddr.sin_family = AF_INET;
    _sockaddr.sin_addr.s_addr = inet_addr("127.0.0.1");
    _sockaddr.sin_port = htons(13800);

    if (setsockopt(fd, SOL_SOCKET, SO_BROADCAST, &broadcast_val, sizeof(broadcast_val))) {
        cerr << "Error enabling broadcast" << errno << endl;
        return -1;
    }

    if (fcntl(fd, F_SETFL, O_NONBLOCK | FASYNC) < 0) {
        cerr << "Error setting socket fd as non-blocking " << errno << endl;
        return -1;
    }

    return fd;
}

int main(int argc, char** argv)
{
    UART_node m_uartNode;
    char buffer[512];
    int udp_fd;

    if ((udp_fd = setup_udp()) < 0)
        return -1;

    // Create subscribers
    vehicle_command_Subscriber vehicle_command_sub;
    vehicle_command_sub.init();

    // Create publishers
    vehicle_status_Publisher vehicle_status_pub;
    vehicle_status_pub.init();

    sensor_combined_Publisher sensor_combined_pub;
    sensor_combined_pub.init();

    vehicle_command_ack_Publisher vehicle_command_ack_pub;
    vehicle_command_ack_pub.init();

    int epollfd = epoll_create1(EPOLL_CLOEXEC);
    if (epollfd == -1) {
        std::cerr << "Epoll create error " << std::endl;
        return -1;
    }

    int fd = m_uartNode.init_uart("/dev/ttyS1", 460800);
    struct epoll_event epev = {};
    epev.events = EPOLLIN;
    epev.data.fd = fd;

    if (epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, &epev) < 0) {
        std::cerr << "Epoll add UART fd error " << std::endl;
        return -1;
    }

    epev.data.fd = udp_fd;

    if (epoll_ctl(epollfd, EPOLL_CTL_ADD, udp_fd, &epev) < 0) {
        std::cerr << "Epoll add UDP fd error " << std::endl;
        return -1;
    }

    struct epoll_event events[8];
    char topic_ID = 255;
    do
    {
        int r = epoll_wait(epollfd, events, 8, 500);
        if (r < 0 && errno == EINTR)
            continue;

        bool udp = false;
        bool uart = false;
        for (int i = 0; i < r; i++) {
            if (events[i].data.fd == udp_fd)
                udp = true;
            if (events[i].data.fd == fd)
                uart = true;
        }

        if (uart) {
            uint8_t seq;
            m_uartNode.read();
            while (m_uartNode.parseRTPSfromUART(&topic_ID, &seq, buffer) > 0)
            {
                eprosima::fastcdr::FastBuffer cdrbuffer(buffer, sizeof(buffer));
                eprosima::fastcdr::Cdr cdr_des(cdrbuffer);

                // Publish message received from UART
                cout << "SEQ: " << (int)seq << endl;
                switch (topic_ID) {
                case VehicleStatusId: {
                    std::cout << "received vehicle_status" << std::endl;
                    vehicle_status_ st {};
                    st.deserialize(cdr_des);
                    vehicle_status_pub.publish(&st);
                    break;
                }
                case SensorCombinedId: {
                    std::cout << "received sensor_combined" << std::endl;
                    sensor_combined_ sc {};
                    sc.deserialize(cdr_des);
                    sensor_combined_pub.publish(&sc);
                    break;
                }
                case VehicleCommandAckId: {
                    std::cout << "received vehicle_command_ack" << std::endl;
                    vehicle_command_ack_ vca {};
                    vca.deserialize(cdr_des);
                    vehicle_command_ack_pub.publish(&vca);
                    break;
                }
                default:
                    std::cout << "No message msg - id" << (int)topic_ID << " -- " << buffer << endl;
                }

            }

            int len;
            while ((len = m_uartNode.parseMavlinkFromUART(buffer, sizeof(buffer))) > 0) {
                // Just send it, as is, to mavlink-router
                int ret = sendto(udp_fd, buffer, len, 0,
                        (struct sockaddr *)&_sockaddr, sizeof(_sockaddr));
                // cout << "sent to udp " << ret << " errno " << errno << endl;
            }
        }

        // Send mavlink over UART
        if (udp) {
            // Assumption: we are running side by side with mavlink-router
            // So, UDP won't fail.
            // In the future, mavlink-router and rtps-router should become one
            // (or at least, share memory for this)
            socklen_t addrlen = sizeof(sockaddr);
            ssize_t len = recvfrom(udp_fd, buffer, sizeof(buffer), 0,
                        (struct sockaddr *)&_sockaddr, &addrlen);

            if (r > 0) {
                int ret = m_uartNode.writeMavlinkToUART(buffer, len);

                if (ret > 0) {
                     std::cout << "Wrote mavlink to UART " << ret << std::endl;
                }
                else {
                    std::cout << "Failed to write mavlink to UART " << errno << std::endl;
                }
            }
        }

        // Send subscribed topics over UART
        if (vehicle_command_sub.hasMsg()) {
            std::cout << "Received loop-msg" << std::endl;
            vehicle_command_ msg = vehicle_command_sub.getMsg();
            eprosima::fastcdr::FastBuffer cdrbuffer(buffer, sizeof(buffer));
            eprosima::fastcdr::Cdr scdr(cdrbuffer);
            msg.serialize(scdr);
            auto len = scdr.getSerializedDataLength();
            std::cout << "len: " << len << std::endl;
            int ret = m_uartNode.writeRTPStoUART((char) VehicleCommandId, scdr.getBufferPointer(), len);

            if (ret > 0) {
                 std::cout << "Wrote RTPS to UART " << ret << std::endl;
            }
            else {
                std::cout << "Failed to write RTPS to UART " << errno << std::endl;
            }
        }
    }while(true);

    return 0;
}
