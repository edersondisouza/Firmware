// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file vehicle_status_.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _vehicle_status__H_
#define _vehicle_status__H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(vehicle_status__SOURCE)
#define vehicle_status__DllAPI __declspec( dllexport )
#else
#define vehicle_status__DllAPI __declspec( dllimport )
#endif // vehicle_status__SOURCE
#else
#define vehicle_status__DllAPI
#endif
#else
#define vehicle_status__DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

/*!
 * @brief This class represents the structure vehicle_status_ defined by the user in the IDL file.
 * @ingroup VEHICLE_STATUS_
 */
class vehicle_status_
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport vehicle_status_();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~vehicle_status_();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object vehicle_status_ that will be copied.
     */
    eProsima_user_DllExport vehicle_status_(const vehicle_status_ &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object vehicle_status_ that will be copied.
     */
    eProsima_user_DllExport vehicle_status_(vehicle_status_ &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object vehicle_status_ that will be copied.
     */
    eProsima_user_DllExport vehicle_status_& operator=(const vehicle_status_ &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object vehicle_status_ that will be copied.
     */
    eProsima_user_DllExport vehicle_status_& operator=(vehicle_status_ &&x);
    
    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    inline eProsima_user_DllExport void timestamp(uint64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    inline eProsima_user_DllExport uint64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    inline eProsima_user_DllExport uint64_t& timestamp()
    {
        return m_timestamp;
    }
    /*!
     * @brief This function sets a value in member system_id
     * @param _system_id New value for member system_id
     */
    inline eProsima_user_DllExport void system_id(uint32_t _system_id)
    {
        m_system_id = _system_id;
    }

    /*!
     * @brief This function returns the value of member system_id
     * @return Value of member system_id
     */
    inline eProsima_user_DllExport uint32_t system_id() const
    {
        return m_system_id;
    }

    /*!
     * @brief This function returns a reference to member system_id
     * @return Reference to member system_id
     */
    inline eProsima_user_DllExport uint32_t& system_id()
    {
        return m_system_id;
    }
    /*!
     * @brief This function sets a value in member component_id
     * @param _component_id New value for member component_id
     */
    inline eProsima_user_DllExport void component_id(uint32_t _component_id)
    {
        m_component_id = _component_id;
    }

    /*!
     * @brief This function returns the value of member component_id
     * @return Value of member component_id
     */
    inline eProsima_user_DllExport uint32_t component_id() const
    {
        return m_component_id;
    }

    /*!
     * @brief This function returns a reference to member component_id
     * @return Reference to member component_id
     */
    inline eProsima_user_DllExport uint32_t& component_id()
    {
        return m_component_id;
    }
    /*!
     * @brief This function sets a value in member onboard_control_sensors_present
     * @param _onboard_control_sensors_present New value for member onboard_control_sensors_present
     */
    inline eProsima_user_DllExport void onboard_control_sensors_present(uint32_t _onboard_control_sensors_present)
    {
        m_onboard_control_sensors_present = _onboard_control_sensors_present;
    }

    /*!
     * @brief This function returns the value of member onboard_control_sensors_present
     * @return Value of member onboard_control_sensors_present
     */
    inline eProsima_user_DllExport uint32_t onboard_control_sensors_present() const
    {
        return m_onboard_control_sensors_present;
    }

    /*!
     * @brief This function returns a reference to member onboard_control_sensors_present
     * @return Reference to member onboard_control_sensors_present
     */
    inline eProsima_user_DllExport uint32_t& onboard_control_sensors_present()
    {
        return m_onboard_control_sensors_present;
    }
    /*!
     * @brief This function sets a value in member onboard_control_sensors_enabled
     * @param _onboard_control_sensors_enabled New value for member onboard_control_sensors_enabled
     */
    inline eProsima_user_DllExport void onboard_control_sensors_enabled(uint32_t _onboard_control_sensors_enabled)
    {
        m_onboard_control_sensors_enabled = _onboard_control_sensors_enabled;
    }

    /*!
     * @brief This function returns the value of member onboard_control_sensors_enabled
     * @return Value of member onboard_control_sensors_enabled
     */
    inline eProsima_user_DllExport uint32_t onboard_control_sensors_enabled() const
    {
        return m_onboard_control_sensors_enabled;
    }

    /*!
     * @brief This function returns a reference to member onboard_control_sensors_enabled
     * @return Reference to member onboard_control_sensors_enabled
     */
    inline eProsima_user_DllExport uint32_t& onboard_control_sensors_enabled()
    {
        return m_onboard_control_sensors_enabled;
    }
    /*!
     * @brief This function sets a value in member onboard_control_sensors_health
     * @param _onboard_control_sensors_health New value for member onboard_control_sensors_health
     */
    inline eProsima_user_DllExport void onboard_control_sensors_health(uint32_t _onboard_control_sensors_health)
    {
        m_onboard_control_sensors_health = _onboard_control_sensors_health;
    }

    /*!
     * @brief This function returns the value of member onboard_control_sensors_health
     * @return Value of member onboard_control_sensors_health
     */
    inline eProsima_user_DllExport uint32_t onboard_control_sensors_health() const
    {
        return m_onboard_control_sensors_health;
    }

    /*!
     * @brief This function returns a reference to member onboard_control_sensors_health
     * @return Reference to member onboard_control_sensors_health
     */
    inline eProsima_user_DllExport uint32_t& onboard_control_sensors_health()
    {
        return m_onboard_control_sensors_health;
    }
    /*!
     * @brief This function sets a value in member nav_state
     * @param _nav_state New value for member nav_state
     */
    inline eProsima_user_DllExport void nav_state(uint8_t _nav_state)
    {
        m_nav_state = _nav_state;
    }

    /*!
     * @brief This function returns the value of member nav_state
     * @return Value of member nav_state
     */
    inline eProsima_user_DllExport uint8_t nav_state() const
    {
        return m_nav_state;
    }

    /*!
     * @brief This function returns a reference to member nav_state
     * @return Reference to member nav_state
     */
    inline eProsima_user_DllExport uint8_t& nav_state()
    {
        return m_nav_state;
    }
    /*!
     * @brief This function sets a value in member arming_state
     * @param _arming_state New value for member arming_state
     */
    inline eProsima_user_DllExport void arming_state(uint8_t _arming_state)
    {
        m_arming_state = _arming_state;
    }

    /*!
     * @brief This function returns the value of member arming_state
     * @return Value of member arming_state
     */
    inline eProsima_user_DllExport uint8_t arming_state() const
    {
        return m_arming_state;
    }

    /*!
     * @brief This function returns a reference to member arming_state
     * @return Reference to member arming_state
     */
    inline eProsima_user_DllExport uint8_t& arming_state()
    {
        return m_arming_state;
    }
    /*!
     * @brief This function sets a value in member hil_state
     * @param _hil_state New value for member hil_state
     */
    inline eProsima_user_DllExport void hil_state(uint8_t _hil_state)
    {
        m_hil_state = _hil_state;
    }

    /*!
     * @brief This function returns the value of member hil_state
     * @return Value of member hil_state
     */
    inline eProsima_user_DllExport uint8_t hil_state() const
    {
        return m_hil_state;
    }

    /*!
     * @brief This function returns a reference to member hil_state
     * @return Reference to member hil_state
     */
    inline eProsima_user_DllExport uint8_t& hil_state()
    {
        return m_hil_state;
    }
    /*!
     * @brief This function sets a value in member failsafe
     * @param _failsafe New value for member failsafe
     */
    inline eProsima_user_DllExport void failsafe(bool _failsafe)
    {
        m_failsafe = _failsafe;
    }

    /*!
     * @brief This function returns the value of member failsafe
     * @return Value of member failsafe
     */
    inline eProsima_user_DllExport bool failsafe() const
    {
        return m_failsafe;
    }

    /*!
     * @brief This function returns a reference to member failsafe
     * @return Reference to member failsafe
     */
    inline eProsima_user_DllExport bool& failsafe()
    {
        return m_failsafe;
    }
    /*!
     * @brief This function sets a value in member system_type
     * @param _system_type New value for member system_type
     */
    inline eProsima_user_DllExport void system_type(uint8_t _system_type)
    {
        m_system_type = _system_type;
    }

    /*!
     * @brief This function returns the value of member system_type
     * @return Value of member system_type
     */
    inline eProsima_user_DllExport uint8_t system_type() const
    {
        return m_system_type;
    }

    /*!
     * @brief This function returns a reference to member system_type
     * @return Reference to member system_type
     */
    inline eProsima_user_DllExport uint8_t& system_type()
    {
        return m_system_type;
    }
    /*!
     * @brief This function sets a value in member is_rotary_wing
     * @param _is_rotary_wing New value for member is_rotary_wing
     */
    inline eProsima_user_DllExport void is_rotary_wing(bool _is_rotary_wing)
    {
        m_is_rotary_wing = _is_rotary_wing;
    }

    /*!
     * @brief This function returns the value of member is_rotary_wing
     * @return Value of member is_rotary_wing
     */
    inline eProsima_user_DllExport bool is_rotary_wing() const
    {
        return m_is_rotary_wing;
    }

    /*!
     * @brief This function returns a reference to member is_rotary_wing
     * @return Reference to member is_rotary_wing
     */
    inline eProsima_user_DllExport bool& is_rotary_wing()
    {
        return m_is_rotary_wing;
    }
    /*!
     * @brief This function sets a value in member is_vtol
     * @param _is_vtol New value for member is_vtol
     */
    inline eProsima_user_DllExport void is_vtol(bool _is_vtol)
    {
        m_is_vtol = _is_vtol;
    }

    /*!
     * @brief This function returns the value of member is_vtol
     * @return Value of member is_vtol
     */
    inline eProsima_user_DllExport bool is_vtol() const
    {
        return m_is_vtol;
    }

    /*!
     * @brief This function returns a reference to member is_vtol
     * @return Reference to member is_vtol
     */
    inline eProsima_user_DllExport bool& is_vtol()
    {
        return m_is_vtol;
    }
    /*!
     * @brief This function sets a value in member vtol_fw_permanent_stab
     * @param _vtol_fw_permanent_stab New value for member vtol_fw_permanent_stab
     */
    inline eProsima_user_DllExport void vtol_fw_permanent_stab(bool _vtol_fw_permanent_stab)
    {
        m_vtol_fw_permanent_stab = _vtol_fw_permanent_stab;
    }

    /*!
     * @brief This function returns the value of member vtol_fw_permanent_stab
     * @return Value of member vtol_fw_permanent_stab
     */
    inline eProsima_user_DllExport bool vtol_fw_permanent_stab() const
    {
        return m_vtol_fw_permanent_stab;
    }

    /*!
     * @brief This function returns a reference to member vtol_fw_permanent_stab
     * @return Reference to member vtol_fw_permanent_stab
     */
    inline eProsima_user_DllExport bool& vtol_fw_permanent_stab()
    {
        return m_vtol_fw_permanent_stab;
    }
    /*!
     * @brief This function sets a value in member in_transition_mode
     * @param _in_transition_mode New value for member in_transition_mode
     */
    inline eProsima_user_DllExport void in_transition_mode(bool _in_transition_mode)
    {
        m_in_transition_mode = _in_transition_mode;
    }

    /*!
     * @brief This function returns the value of member in_transition_mode
     * @return Value of member in_transition_mode
     */
    inline eProsima_user_DllExport bool in_transition_mode() const
    {
        return m_in_transition_mode;
    }

    /*!
     * @brief This function returns a reference to member in_transition_mode
     * @return Reference to member in_transition_mode
     */
    inline eProsima_user_DllExport bool& in_transition_mode()
    {
        return m_in_transition_mode;
    }
    /*!
     * @brief This function sets a value in member in_transition_to_fw
     * @param _in_transition_to_fw New value for member in_transition_to_fw
     */
    inline eProsima_user_DllExport void in_transition_to_fw(bool _in_transition_to_fw)
    {
        m_in_transition_to_fw = _in_transition_to_fw;
    }

    /*!
     * @brief This function returns the value of member in_transition_to_fw
     * @return Value of member in_transition_to_fw
     */
    inline eProsima_user_DllExport bool in_transition_to_fw() const
    {
        return m_in_transition_to_fw;
    }

    /*!
     * @brief This function returns a reference to member in_transition_to_fw
     * @return Reference to member in_transition_to_fw
     */
    inline eProsima_user_DllExport bool& in_transition_to_fw()
    {
        return m_in_transition_to_fw;
    }
    /*!
     * @brief This function sets a value in member rc_signal_lost
     * @param _rc_signal_lost New value for member rc_signal_lost
     */
    inline eProsima_user_DllExport void rc_signal_lost(bool _rc_signal_lost)
    {
        m_rc_signal_lost = _rc_signal_lost;
    }

    /*!
     * @brief This function returns the value of member rc_signal_lost
     * @return Value of member rc_signal_lost
     */
    inline eProsima_user_DllExport bool rc_signal_lost() const
    {
        return m_rc_signal_lost;
    }

    /*!
     * @brief This function returns a reference to member rc_signal_lost
     * @return Reference to member rc_signal_lost
     */
    inline eProsima_user_DllExport bool& rc_signal_lost()
    {
        return m_rc_signal_lost;
    }
    /*!
     * @brief This function sets a value in member rc_input_mode
     * @param _rc_input_mode New value for member rc_input_mode
     */
    inline eProsima_user_DllExport void rc_input_mode(uint8_t _rc_input_mode)
    {
        m_rc_input_mode = _rc_input_mode;
    }

    /*!
     * @brief This function returns the value of member rc_input_mode
     * @return Value of member rc_input_mode
     */
    inline eProsima_user_DllExport uint8_t rc_input_mode() const
    {
        return m_rc_input_mode;
    }

    /*!
     * @brief This function returns a reference to member rc_input_mode
     * @return Reference to member rc_input_mode
     */
    inline eProsima_user_DllExport uint8_t& rc_input_mode()
    {
        return m_rc_input_mode;
    }
    /*!
     * @brief This function sets a value in member data_link_lost
     * @param _data_link_lost New value for member data_link_lost
     */
    inline eProsima_user_DllExport void data_link_lost(bool _data_link_lost)
    {
        m_data_link_lost = _data_link_lost;
    }

    /*!
     * @brief This function returns the value of member data_link_lost
     * @return Value of member data_link_lost
     */
    inline eProsima_user_DllExport bool data_link_lost() const
    {
        return m_data_link_lost;
    }

    /*!
     * @brief This function returns a reference to member data_link_lost
     * @return Reference to member data_link_lost
     */
    inline eProsima_user_DllExport bool& data_link_lost()
    {
        return m_data_link_lost;
    }
    /*!
     * @brief This function sets a value in member data_link_lost_counter
     * @param _data_link_lost_counter New value for member data_link_lost_counter
     */
    inline eProsima_user_DllExport void data_link_lost_counter(uint8_t _data_link_lost_counter)
    {
        m_data_link_lost_counter = _data_link_lost_counter;
    }

    /*!
     * @brief This function returns the value of member data_link_lost_counter
     * @return Value of member data_link_lost_counter
     */
    inline eProsima_user_DllExport uint8_t data_link_lost_counter() const
    {
        return m_data_link_lost_counter;
    }

    /*!
     * @brief This function returns a reference to member data_link_lost_counter
     * @return Reference to member data_link_lost_counter
     */
    inline eProsima_user_DllExport uint8_t& data_link_lost_counter()
    {
        return m_data_link_lost_counter;
    }
    /*!
     * @brief This function sets a value in member engine_failure
     * @param _engine_failure New value for member engine_failure
     */
    inline eProsima_user_DllExport void engine_failure(bool _engine_failure)
    {
        m_engine_failure = _engine_failure;
    }

    /*!
     * @brief This function returns the value of member engine_failure
     * @return Value of member engine_failure
     */
    inline eProsima_user_DllExport bool engine_failure() const
    {
        return m_engine_failure;
    }

    /*!
     * @brief This function returns a reference to member engine_failure
     * @return Reference to member engine_failure
     */
    inline eProsima_user_DllExport bool& engine_failure()
    {
        return m_engine_failure;
    }
    /*!
     * @brief This function sets a value in member engine_failure_cmd
     * @param _engine_failure_cmd New value for member engine_failure_cmd
     */
    inline eProsima_user_DllExport void engine_failure_cmd(bool _engine_failure_cmd)
    {
        m_engine_failure_cmd = _engine_failure_cmd;
    }

    /*!
     * @brief This function returns the value of member engine_failure_cmd
     * @return Value of member engine_failure_cmd
     */
    inline eProsima_user_DllExport bool engine_failure_cmd() const
    {
        return m_engine_failure_cmd;
    }

    /*!
     * @brief This function returns a reference to member engine_failure_cmd
     * @return Reference to member engine_failure_cmd
     */
    inline eProsima_user_DllExport bool& engine_failure_cmd()
    {
        return m_engine_failure_cmd;
    }
    /*!
     * @brief This function sets a value in member mission_failure
     * @param _mission_failure New value for member mission_failure
     */
    inline eProsima_user_DllExport void mission_failure(bool _mission_failure)
    {
        m_mission_failure = _mission_failure;
    }

    /*!
     * @brief This function returns the value of member mission_failure
     * @return Value of member mission_failure
     */
    inline eProsima_user_DllExport bool mission_failure() const
    {
        return m_mission_failure;
    }

    /*!
     * @brief This function returns a reference to member mission_failure
     * @return Reference to member mission_failure
     */
    inline eProsima_user_DllExport bool& mission_failure()
    {
        return m_mission_failure;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const vehicle_status_& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    uint64_t m_timestamp;
    uint32_t m_system_id;
    uint32_t m_component_id;
    uint32_t m_onboard_control_sensors_present;
    uint32_t m_onboard_control_sensors_enabled;
    uint32_t m_onboard_control_sensors_health;
    uint8_t m_nav_state;
    uint8_t m_arming_state;
    uint8_t m_hil_state;
    bool m_failsafe;
    uint8_t m_system_type;
    bool m_is_rotary_wing;
    bool m_is_vtol;
    bool m_vtol_fw_permanent_stab;
    bool m_in_transition_mode;
    bool m_in_transition_to_fw;
    bool m_rc_signal_lost;
    uint8_t m_rc_input_mode;
    bool m_data_link_lost;
    uint8_t m_data_link_lost_counter;
    bool m_engine_failure;
    bool m_engine_failure_cmd;
    bool m_mission_failure;
};

#endif // _vehicle_status__H_